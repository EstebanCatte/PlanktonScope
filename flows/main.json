[
    {
        "id": "c4414305.176578",
        "type": "tab",
        "label": "Main",
        "disabled": false,
        "info": ""
    },
    {
        "id": "aafb7d9f.f516f",
        "type": "subflow",
        "name": "RPi Monitoring",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "color": "#87A980",
        "icon": "node-red/status.svg"
    },
    {
        "id": "3f0fd072.06e2c8",
        "type": "subflow",
        "name": "Acquisition actuation",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "color": "#A6BBCF",
        "icon": "font-awesome/fa-camera"
    },
    {
        "id": "435c6174.e0c8b",
        "type": "subflow",
        "name": "Python Code Creation",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "10348484.8ca5b3"
                    },
                    {
                        "id": "e49710cf.c4831"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "4273b9bf.bb07a8",
        "type": "subflow",
        "name": "Acquisition inputs",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "55d70110.127d38"
                    },
                    {
                        "id": "4e6a3b73.7472d4"
                    },
                    {
                        "id": "ec5967a.409eb18"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 40,
                "wires": [
                    {
                        "id": "a105d7c9.07d71",
                        "port": 0
                    },
                    {
                        "id": "816c19e2.f940e",
                        "port": 0
                    },
                    {
                        "id": "530d8426.5c4bec",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#A6BBCF",
        "icon": "node-red-contrib-camerapi/photo.png"
    },
    {
        "id": "4d3786dd.dd79f",
        "type": "subflow",
        "name": "Process metadata",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "7228965.6f65ae8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "7bad3862.c22b5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "20bc0424.146724",
        "type": "subflow",
        "name": "MQTT Receive & Plot",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "color": "#F3B567",
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "7aea7e49.4a3c88",
        "type": "subflow",
        "name": "System Commands",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "color": "#FFCC66",
        "icon": "node-red-dashboard/ui_button.png"
    },
    {
        "id": "672ac548.1a9bac",
        "type": "subflow",
        "name": "Object metadata",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "46ef98a.3d3e8e8"
                    },
                    {
                        "id": "e6b2a290.7593c8"
                    },
                    {
                        "id": "61bc4942.96a3d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1060,
                "y": 159,
                "wires": [
                    {
                        "id": "d7ac6b26.75e388",
                        "port": 0
                    },
                    {
                        "id": "70dcbf49.4b0e6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1060,
                "y": 59,
                "wires": [
                    {
                        "id": "415b9f0c.5f0b48",
                        "port": 0
                    },
                    {
                        "id": "3e9ae6e6.35b942",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "5163a57b.0008b4",
        "type": "subflow",
        "name": "Acquisition metadata",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "7c09012f.b50098"
                    },
                    {
                        "id": "3e3b0646.cf9a1a"
                    },
                    {
                        "id": "2b4282c2.8752ae"
                    },
                    {
                        "id": "90439ce.e3524e"
                    },
                    {
                        "id": "7f710823.92974"
                    },
                    {
                        "id": "9355d580.a2338"
                    },
                    {
                        "id": "c8be3f91.8686e"
                    },
                    {
                        "id": "98bb1c89.99c7b8"
                    },
                    {
                        "id": "218c020a.2b0566"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 40,
                "wires": [
                    {
                        "id": "52374b71.714fd4",
                        "port": 0
                    },
                    {
                        "id": "858ed565.0993b8",
                        "port": 0
                    },
                    {
                        "id": "2cf276d8.880672",
                        "port": 0
                    },
                    {
                        "id": "ebcf7cae.9e21c8",
                        "port": 0
                    },
                    {
                        "id": "7291a2a3.c9a974",
                        "port": 0
                    },
                    {
                        "id": "25294db5.4fe722",
                        "port": 0
                    },
                    {
                        "id": "4cfd49e3.3db3c",
                        "port": 0
                    },
                    {
                        "id": "7dbb773.926b488",
                        "port": 0
                    }
                ]
            },
            {
                "x": 900,
                "y": 360,
                "wires": [
                    {
                        "id": "79923da9.365d7c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "b1edcbe7.366f7",
        "type": "subflow",
        "name": "Pump actuation",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "66f2533e.b3080c"
                    },
                    {
                        "id": "e3472832.6c2cc8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 40,
                "wires": [
                    {
                        "id": "1f1c2de7.b242f2",
                        "port": 0
                    },
                    {
                        "id": "8cab4571.004668",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#A6BBCF",
        "icon": "font-awesome/fa-recycle"
    },
    {
        "id": "3df4e02.36602a",
        "type": "subflow",
        "name": "Focus actuation",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "ba9fc5ee.19aee8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 200,
                "wires": [
                    {
                        "id": "3df51223.81e336",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#A6BBCF",
        "icon": "node-red/sort.svg"
    },
    {
        "id": "6bc47c75.93e24c",
        "type": "subflow",
        "name": "Sample metadata",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "a4b7cb08.270d"
                    },
                    {
                        "id": "d7cff063.331ff8"
                    },
                    {
                        "id": "acfe2f.33fd31d"
                    },
                    {
                        "id": "cfaa2598.c63ec"
                    },
                    {
                        "id": "25201379.163e3c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": [
                    {
                        "id": "412da17d.09c39",
                        "port": 0
                    },
                    {
                        "id": "236eeefd.7d50f2",
                        "port": 0
                    },
                    {
                        "id": "ccb4ce9e.4f9108",
                        "port": 0
                    },
                    {
                        "id": "d76b1790.9ffc2",
                        "port": 0
                    },
                    {
                        "id": "50431d7c.cc673c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "7a723961.386be",
        "type": "ui_group",
        "z": "",
        "name": "Monitor RPi",
        "tab": "c4349ea0.ea1cc8",
        "order": 11,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "3bd8d121.499b96",
        "type": "ui_group",
        "z": "",
        "name": "Acquisition actuation",
        "tab": "c4349ea0.ea1cc8",
        "order": 9,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "6fdfb3ec.fd451c",
        "type": "ui_group",
        "z": "",
        "name": "Acquisition inputs",
        "tab": "c4349ea0.ea1cc8",
        "order": 8,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "c32bf44c.3b67a8",
        "type": "ui_group",
        "z": "",
        "name": "Process metadata",
        "tab": "c4349ea0.ea1cc8",
        "order": 7,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "6e9cdee.ac3c2a",
        "type": "mqtt-broker",
        "z": "",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "test",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "1f183a1c.7d2846",
        "type": "ui_group",
        "z": "",
        "name": "MQTT Plots",
        "tab": "c4349ea0.ea1cc8",
        "order": 10,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "1f044bf8.be704c",
        "type": "ui_group",
        "z": "",
        "name": "RPi commands",
        "tab": "c4349ea0.ea1cc8",
        "order": 12,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "2f95b761.bd818",
        "type": "ui_group",
        "z": "",
        "name": "Object metadata",
        "tab": "c4349ea0.ea1cc8",
        "order": 2,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "14742691.56c8c1",
        "type": "ui_group",
        "z": "",
        "name": "Acquisition metadata",
        "tab": "c4349ea0.ea1cc8",
        "order": 3,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "517b2aa5.93722c",
        "type": "ui_group",
        "z": "",
        "name": "Pump actuation",
        "tab": "c4349ea0.ea1cc8",
        "order": 6,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "88613aab.984d18",
        "type": "ui_group",
        "z": "",
        "name": "Focus actuation",
        "tab": "c4349ea0.ea1cc8",
        "order": 5,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "e6efd12e.dedae8",
        "type": "mqtt-broker",
        "z": "",
        "name": "",
        "broker": "0.0.0.0",
        "port": "1883",
        "clientid": "Client_node",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "bfdb5a44.4223",
        "type": "ui_group",
        "z": "",
        "name": "Sample metadata",
        "tab": "c4349ea0.ea1cc8",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "c4349ea0.ea1cc8",
        "type": "ui_tab",
        "z": "",
        "name": "Acquisition",
        "icon": "fa-eyedropper",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6b2a8cdd.9f43cc",
        "type": "ui_group",
        "z": "",
        "name": "Streaming camera",
        "tab": "c4349ea0.ea1cc8",
        "order": 4,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "b6a679c9.da3fa8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d4285aee.f326e",
        "type": "exec",
        "z": "aafb7d9f.f516f",
        "command": "free -m | grep \"Mem\" | awk -F ' ' '{print $3}'",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Get memory used",
        "x": 430,
        "y": 100,
        "wires": [
            [
                "5d2fe716.8ad198",
                "6326d8e5.292c5"
            ],
            [],
            []
        ]
    },
    {
        "id": "d6e7a1be.f8f8f8",
        "type": "inject",
        "z": "aafb7d9f.f516f",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "d4285aee.f326e"
            ]
        ]
    },
    {
        "id": "5d2fe716.8ad198",
        "type": "ui_chart",
        "z": "aafb7d9f.f516f",
        "name": "Memory Load Chart",
        "group": "7a723961.386be",
        "order": 8,
        "width": 19,
        "height": 4,
        "label": "Memory Load Chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 660,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "6326d8e5.292c5",
        "type": "ui_gauge",
        "z": "aafb7d9f.f516f",
        "name": "Memory Load Donut",
        "group": "7a723961.386be",
        "order": 7,
        "width": 5,
        "height": 4,
        "gtype": "donut",
        "title": "Memory Load Donut",
        "label": "Mo",
        "format": "{{value}}",
        "min": 0,
        "max": "4000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "1000",
        "seg2": "2000",
        "x": 660,
        "y": 80,
        "wires": []
    },
    {
        "id": "b38a018c.21dc18",
        "type": "ui_gauge",
        "z": "aafb7d9f.f516f",
        "name": "CPU Temp Donut",
        "group": "7a723961.386be",
        "order": 1,
        "width": 5,
        "height": 4,
        "gtype": "donut",
        "title": "CPU Temp Donut",
        "label": "C",
        "format": "{{value}}",
        "min": "35",
        "max": "55",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 650,
        "y": 160,
        "wires": []
    },
    {
        "id": "c35a43a5.f0d1e8",
        "type": "exec",
        "z": "aafb7d9f.f516f",
        "command": "vcgencmd measure_temp | tr -d \"temp=\" | tr -d \"'C\" | tr -d \"\\n\"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "RPi Temp.",
        "x": 410,
        "y": 180,
        "wires": [
            [
                "8f6f6c48.fe30c",
                "b38a018c.21dc18",
                "d2d8b9f6.c82e68"
            ],
            [],
            []
        ]
    },
    {
        "id": "d2d8b9f6.c82e68",
        "type": "ui_chart",
        "z": "aafb7d9f.f516f",
        "name": "CPU Temp Chart",
        "group": "7a723961.386be",
        "order": 2,
        "width": 19,
        "height": 4,
        "label": "CPU Temp Chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "20",
        "removeOlderPoints": "200",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": true,
        "outputs": 1,
        "x": 650,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "602add74.9aa2a4",
        "type": "python3-function",
        "z": "aafb7d9f.f516f",
        "name": "fan.py",
        "func": "#!/usr/bin/python\nimport smbus\nimport sys\n\nstate = msg[\"payload\"]\n\nbus = smbus.SMBus(1)\n\nDEVICE_ADDRESS = 0x0d\n\nif state == \"off\":\n    bus.write_byte_data(DEVICE_ADDRESS, 0x08, 0x00)\n    bus.write_byte_data(DEVICE_ADDRESS, 0x08, 0x00)\nif state == \"on\":\n    bus.write_byte_data(DEVICE_ADDRESS, 0x08, 0x01)\n    bus.write_byte_data(DEVICE_ADDRESS, 0x08, 0x01)",
        "outputs": 1,
        "x": 1290,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "8f6f6c48.fe30c",
        "type": "switch",
        "z": "aafb7d9f.f516f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "45",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "40",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 140,
        "wires": [
            [
                "916264f4.1b31f"
            ],
            [
                "743c04f5.97e51c"
            ]
        ]
    },
    {
        "id": "743c04f5.97e51c",
        "type": "change",
        "z": "aafb7d9f.f516f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 160,
        "wires": [
            [
                "602add74.9aa2a4"
            ]
        ]
    },
    {
        "id": "9f9c97d.42b1768",
        "type": "inject",
        "z": "aafb7d9f.f516f",
        "name": "",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "2d899302.9bc384",
                "e0f99dcc.c0257",
                "c35a43a5.f0d1e8"
            ]
        ]
    },
    {
        "id": "2d899302.9bc384",
        "type": "exec",
        "z": "aafb7d9f.f516f",
        "command": "top -d 0.5 -b -n2 | grep \"Cpu(s)\"|tail -n 1 | awk '{print $2 + $4}' | tr -d \"\\n\"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "CPU Load",
        "x": 410,
        "y": 260,
        "wires": [
            [
                "35e3cb5a.debb74",
                "84d67d53.6001e"
            ],
            [],
            []
        ]
    },
    {
        "id": "e0f99dcc.c0257",
        "type": "exec",
        "z": "aafb7d9f.f516f",
        "command": "free | grep Mem | awk '{print 100*($4+$6+$7)/$2}' | awk -F \".\" '{print $1}' | tr -d \"\\n\"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Free Memory",
        "x": 410,
        "y": 340,
        "wires": [
            [
                "f86fc2d5.49c258",
                "cf879f92.12d6b"
            ],
            [],
            []
        ]
    },
    {
        "id": "35e3cb5a.debb74",
        "type": "ui_gauge",
        "z": "aafb7d9f.f516f",
        "name": "CPU Load Donut",
        "group": "7a723961.386be",
        "order": 5,
        "width": 5,
        "height": 4,
        "gtype": "donut",
        "title": "CPU Load Donut",
        "label": "CPU",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 650,
        "y": 240,
        "wires": []
    },
    {
        "id": "f86fc2d5.49c258",
        "type": "ui_gauge",
        "z": "aafb7d9f.f516f",
        "name": "Free memory Donut",
        "group": "7a723961.386be",
        "order": 9,
        "width": 5,
        "height": 4,
        "gtype": "donut",
        "title": "Free memory Donut",
        "label": "RAM",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 660,
        "y": 320,
        "wires": []
    },
    {
        "id": "91eb9ad.4dbb5e8",
        "type": "exec",
        "z": "aafb7d9f.f516f",
        "command": "df -h | grep /dev/root | awk -F ' ' '{print $3}' | tr -d G | tr \"\\n$\" \"\\ \" |  sed 's/,/./' | tr -d \" \" ",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Disk Usage",
        "x": 410,
        "y": 420,
        "wires": [
            [
                "7653ee80.f1f07",
                "8ae4d547.d3bb98"
            ],
            [],
            []
        ]
    },
    {
        "id": "7653ee80.f1f07",
        "type": "ui_gauge",
        "z": "aafb7d9f.f516f",
        "name": "Disk Usage Donut",
        "group": "7a723961.386be",
        "order": 3,
        "width": 5,
        "height": 4,
        "gtype": "donut",
        "title": "Disk Usage Donut",
        "label": "Go",
        "format": "{{value}}",
        "min": 0,
        "max": "256",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 650,
        "y": 400,
        "wires": []
    },
    {
        "id": "84d67d53.6001e",
        "type": "ui_chart",
        "z": "aafb7d9f.f516f",
        "name": "CPU Load Chart",
        "group": "7a723961.386be",
        "order": 6,
        "width": 19,
        "height": 4,
        "label": "CPU Load Chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": true,
        "outputs": 1,
        "x": 640,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "cf879f92.12d6b",
        "type": "ui_chart",
        "z": "aafb7d9f.f516f",
        "name": "Free memory Chart",
        "group": "7a723961.386be",
        "order": 10,
        "width": 19,
        "height": 4,
        "label": "Free memory Chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": true,
        "outputs": 1,
        "x": 650,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "22b3544f.b649bc",
        "type": "inject",
        "z": "aafb7d9f.f516f",
        "name": "",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "91eb9ad.4dbb5e8"
            ]
        ]
    },
    {
        "id": "8ae4d547.d3bb98",
        "type": "ui_chart",
        "z": "aafb7d9f.f516f",
        "name": "Disk Usage Chart",
        "group": "7a723961.386be",
        "order": 4,
        "width": 19,
        "height": 4,
        "label": "Disk Usage Chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": true,
        "outputs": 1,
        "x": 650,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "916264f4.1b31f",
        "type": "change",
        "z": "aafb7d9f.f516f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 120,
        "wires": [
            [
                "602add74.9aa2a4"
            ]
        ]
    },
    {
        "id": "a06de215.74a87",
        "type": "ui_button",
        "z": "3f0fd072.06e2c8",
        "name": "",
        "group": "3bd8d121.499b96",
        "order": 2,
        "width": 16,
        "height": 1,
        "passthru": false,
        "label": "Start Acquisition",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "actuator/image",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "d6238ee1.db955"
            ]
        ]
    },
    {
        "id": "d6238ee1.db955",
        "type": "function",
        "z": "3f0fd072.06e2c8",
        "name": "image.js",
        "func": "state = global.get(\"state\");\nglobal.set('img_counter',0)\nglobal.set('obj_counter',0)\nif (state == null){state=\"free\"}\n\nvar sleep_before= global.get(\"custom_sleep_before\");\nvar nb_step= global.get(\"custom_nb_step\");\nvar nb_frame= global.get(\"custom_nb_frame\");\n\nif (sleep_before === undefined || sleep_before === \"\" || sleep_before === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Duration before the acquisition\";\n    \n}else if (nb_step === undefined || nb_step === \"\" || nb_step === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Number of step in between two frames\";\n    \n}else if (nb_frame === undefined || nb_frame === \"\" || nb_frame === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Number of image to save\";\n    \n}else {\n    nb_frame=nb_frame-1\n    \n    msg.payload=sleep_before+' '+nb_step+' '+nb_frame;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 100,
        "wires": [
            [
                "40b06bd3.39ae74"
            ]
        ],
        "info": "### Focusing\n##### focus.py `nb_step` `orientation`\n\n- `nb_step` : **integer** (from 1 to 100000) - number of step to perform by the stage (about 31um/step)\n- `orientation` : **string** - orientation of the focus either `up` or `down`\n\nExample:\n\n    python3.7 $HOME/PlanktonScope/scripts/focus.py 650 up\n"
    },
    {
        "id": "40b06bd3.39ae74",
        "type": "switch",
        "z": "3f0fd072.06e2c8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "actuator/image",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Missing entry :",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 100,
        "wires": [
            [
                "9c6b9e61.7436"
            ],
            [
                "f8f02776.e0e178"
            ]
        ]
    },
    {
        "id": "f8f02776.e0e178",
        "type": "ui_toast",
        "z": "3f0fd072.06e2c8",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 690,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "9c6b9e61.7436",
        "type": "mqtt out",
        "z": "3f0fd072.06e2c8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e6efd12e.dedae8",
        "x": 670,
        "y": 80,
        "wires": []
    },
    {
        "id": "6ff281cf.69e9e8",
        "type": "ui_button",
        "z": "3f0fd072.06e2c8",
        "name": "Stop Acquisition",
        "group": "3bd8d121.499b96",
        "order": 1,
        "width": 8,
        "height": 1,
        "passthru": true,
        "label": "STOP ACQUISITION",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "",
        "payload": "off",
        "payloadType": "str",
        "topic": "actuator/wait",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "c2451eaf.eedc1"
            ]
        ]
    },
    {
        "id": "c2451eaf.eedc1",
        "type": "mqtt out",
        "z": "3f0fd072.06e2c8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e6efd12e.dedae8",
        "x": 350,
        "y": 140,
        "wires": []
    },
    {
        "id": "e972dce3.84be7",
        "type": "exec",
        "z": "435c6174.e0c8b",
        "command": "python3.7 /home/pi/PlanktonScope/script/main.py",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 890,
        "y": 120,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "fd813497.f44d5",
        "type": "file",
        "z": "435c6174.e0c8b",
        "name": "",
        "filename": "/home/pi/PlanktonScope/script/main.py",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 530,
        "y": 100,
        "wires": [
            [
                "e972dce3.84be7"
            ]
        ]
    },
    {
        "id": "a2e43b6f.3b73a",
        "type": "template",
        "z": "435c6174.e0c8b",
        "name": "main.py",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "plain",
        "template": "#Library to send command over I2C for the light module on the fan and subprocess to run bash command\nimport smbus, subprocess\n################################################################################\n#LEDs Actuation\n################################################################################\n\n#define the bus used to actuate the light module on the fan\nbus = smbus.SMBus(1)\n\ndef rgb(R,G,B):\n    #Update LED n1\n    bus.write_byte_data(0x0d, 0x00, 0)\n    bus.write_byte_data(0x0d, 0x01, R)\n    bus.write_byte_data(0x0d, 0x02, G)\n    bus.write_byte_data(0x0d, 0x03, B)\n\n    #Update LED n2\n    bus.write_byte_data(0x0d, 0x00, 1)\n    bus.write_byte_data(0x0d, 0x01, R)\n    bus.write_byte_data(0x0d, 0x02, G)\n    bus.write_byte_data(0x0d, 0x03, B)\n\n    #Update LED n3\n    bus.write_byte_data(0x0d, 0x00, 2)\n    bus.write_byte_data(0x0d, 0x01, R)\n    bus.write_byte_data(0x0d, 0x02, G)\n    bus.write_byte_data(0x0d, 0x03, B)\n\n    #Update the I2C Bus in order to really update the LEDs new values\n    cmd=\"i2cdetect -y 1\"\n    subprocess.Popen(cmd.split(),stdout=subprocess.PIPE)\n    \n#Present the RED color\nrgb(255,0,0)\n\n################################################################################\n#Actuator Libraries\n################################################################################\n\n#Library for exchaning messages with Node-RED\nimport paho.mqtt.client as mqtt\n\n#Library to control the PiCamera\nfrom picamera import PiCamera\n\n#Libraries to control the steppers for focusing and pumping\nfrom adafruit_motor import stepper\nfrom adafruit_motorkit import MotorKit\n\n################################################################################\n#Practical Libraries\n################################################################################\n\n#Library to get date and time for folder name and filename\nfrom datetime import datetime, timedelta\n\n#Library to be able to sleep for a duration\nfrom time import sleep\n\n#Libraries manipulate json format, execute bash commands\nimport json, shutil, os\n\n################################################################################\n#Morphocut Libraries\n################################################################################\n\nfrom skimage.util import img_as_ubyte\nfrom morphocut import Call\nfrom morphocut.contrib.ecotaxa import EcotaxaWriter\nfrom morphocut.contrib.zooprocess import CalculateZooProcessFeatures\nfrom morphocut.core import Pipeline\nfrom morphocut.file import Find\nfrom morphocut.image import (ExtractROI,\n    FindRegions,\n    ImageReader,\n    ImageWriter,\n    RescaleIntensity,\n    RGB2Gray\n)\nfrom morphocut.stat import RunningMedian\nfrom morphocut.str import Format\nfrom morphocut.stream import TQDM, Enumerate, FilterVariables\n\n################################################################################\n#Other image processing Libraries\n################################################################################\n\nfrom skimage.feature import canny\nfrom skimage.color import rgb2gray, label2rgb\nfrom skimage.morphology import disk\nfrom skimage.morphology import erosion, dilation, closing\nfrom skimage.measure import label, regionprops\nimport cv2\n\n################################################################################\n#Streaming PiCamera over server\n################################################################################\nimport io\nimport picamera\nimport logging\nimport socketserver\nfrom threading import Condition\nfrom http import server\nimport threading\n\n################################################################################\n#Get possibility to generate random numbers\n################################################################################\n# generate random integer values\nfrom random import seed\nfrom random import randint\n\n\n\n################################################################################\n#Creation of the webpage containing the PiCamera Streaming\n################################################################################\n\nPAGE=\"\"\"\\\n<html>\n<head>\n<title>PlanktonScope v2 | PiCamera Streaming</title>\n</head>\n<body>\n<img src=\"stream.mjpg\" width=\"1280\" height=\"960\" />\n</body>\n</html>\n\"\"\"\n\n################################################################################\n#Classes for the PiCamera Streaming\n################################################################################\n\nclass StreamingOutput(object):\n    def __init__(self):\n        self.frame = None\n        self.buffer = io.BytesIO()\n        self.condition = Condition()\n\n    def write(self, buf):\n        if buf.startswith(b'\\xff\\xd8'):\n            # New frame, copy the existing buffer's content and notify all\n            # clients it's available\n            self.buffer.truncate()\n            with self.condition:\n                self.frame = self.buffer.getvalue()\n                self.condition.notify_all()\n            self.buffer.seek(0)\n        return self.buffer.write(buf)\n\nclass StreamingHandler(server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        if self.path == '/':\n            self.send_response(301)\n            self.send_header('Location', '/index.html')\n            self.end_headers()\n        elif self.path == '/index.html':\n            content = PAGE.encode('utf-8')\n            self.send_response(200)\n            self.send_header('Content-Type', 'text/html')\n            self.send_header('Content-Length', len(content))\n            self.end_headers()\n            self.wfile.write(content)\n        elif self.path == '/stream.mjpg':\n            self.send_response(200)\n            self.send_header('Age', 0)\n            self.send_header('Cache-Control', 'no-cache, private')\n            self.send_header('Pragma', 'no-cache')\n            self.send_header('Content-Type', 'multipart/x-mixed-replace; boundary=FRAME')\n            self.end_headers()\n            try:\n                while True:\n                    with output.condition:\n                        output.condition.wait()\n                        frame = output.frame\n                    self.wfile.write(b'--FRAME\\r\\n')\n                    self.send_header('Content-Type', 'image/jpeg')\n                    self.send_header('Content-Length', len(frame))\n                    self.end_headers()\n                    self.wfile.write(frame)\n                    self.wfile.write(b'\\r\\n')\n            except Exception as e:\n                logging.warning(\n                    'Removed streaming client %s: %s',\n                    self.client_address, str(e))\n        else:\n            self.send_error(404)\n            self.end_headers()\n\nclass StreamingServer(socketserver.ThreadingMixIn, server.HTTPServer):\n    allow_reuse_address = True\n    daemon_threads = True\n\n################################################################################\n#MQTT core functions\n################################################################################\n\n#Run this function in order to connect to the client (Node-RED)\ndef on_connect(client, userdata, flags, rc):\n    #Print when connected\n    print(\"Connected! - \" + str(rc))\n    #When connected, run subscribe()\n    client.subscribe(\"actuator/#\")\n    #Turn green the light module\n    rgb(0,255,0)\n\n#Run this function in order to subscribe to all the topics begining by actuator\ndef on_subscribe(client, obj, mid, granted_qos):\n    #Print when subscribed\n    print(\"Subscribed! - \"+str(mid)+\" \"+str(granted_qos))\n\n#Run this command when Node-RED is sending a message on the subscribed topic\ndef on_message(client, userdata, msg):\n    #Print the topic and the message\n    print(msg.topic+\" \"+str(msg.qos)+\" \"+str(msg.payload))\n    #Update the global variables command, args and counter\n    global command\n    global args\n    global counter\n    #Parse the topic to find the command. ex : actuator/pump -> pump\n    command=msg.topic.split(\"/\")[1]\n    #Decode the message to find the arguments\n    args=str(msg.payload.decode())\n    #Reset the counter to 0\n    counter=0\n\n################################################################################\n#Init functions\n################################################################################\n\n#define the names for the 2 exsting steppers\nkit = MotorKit()\npump_stepper = kit.stepper1\nfocus_stepper = kit.stepper2\n#Make sure the steppers are release and do not use any power\npump_stepper.release()\nfocus_stepper.release()\n\n#Precise the settings of the PiCamera\ncamera = PiCamera()\ncamera.resolution = (3280, 2464)\ncamera.iso = 60\ncamera.shutter_speed = 500\ncamera.exposure_mode = 'fixedfps'\n\n#Declare the global variables command, args and counter\ncommand = ''\nargs = ''\ncounter=''\n\n#MQTT Client functions definition\nclient = mqtt.Client()\nclient.connect(\"127.0.0.1\",1883,60)\nclient.on_connect = on_connect\nclient.on_subscribe = on_subscribe\nclient.on_message = on_message\nclient.loop_start()\n\n################################################################################\n#Definition of the few important metadata\n################################################################################\n\nlocal_metadata = {\n    \"process_datetime\": datetime.now(),\n    \"acq_camera_resolution\" : camera.resolution,\n    \"acq_camera_iso\" : camera.iso,\n    \"acq_camera_shutter_speed\" : camera.shutter_speed\n}\n\n#Read the content of config.json containing the metadata defined on Node-RED\nconfig_json = open('/home/pi/PlanktonScope/config.json','r')\nnode_red_metadata = json.loads(config_json.read())\n\n#Concat the local metadata and the metadata from Node-RED\nglobal_metadata = {**local_metadata, **node_red_metadata}\n\n#Define the name of the .zip file that will contain the images and the .tsv table for EcoTaxa\narchive_fn = os.path.join(\"/home/pi/PlanktonScope/\",\"export\", \"ecotaxa_export.zip\")\n\n################################################################################\n#MorphoCut Script\n################################################################################\n\n#Define processing pipeline\nwith Pipeline() as p:\n\n    #Recursively find .jpg files in import_path.\n    #Sort to get consective frames.\n    abs_path = Find(\"/home/pi/PlanktonScope/tmp\", [\".jpg\"], sort=True, verbose=True)\n\n    #Extract name from abs_path\n    name = Call(lambda p: os.path.splitext(os.path.basename(p))[0], abs_path)\n\n    #Set the LEDs as Green\n    Call(rgb, 0,255,0)\n\n    #Read image\n    img = ImageReader(abs_path)\n\n    #Show progress bar for frames\n    TQDM(Format(\"Frame {name}\", name=name))\n\n    #Apply running median to approximate the background image\n    flat_field = RunningMedian(img, 5)\n\n    #Correct image\n    img = img / flat_field\n\n    #Rescale intensities and convert to uint8 to speed up calculations\n    img = RescaleIntensity(img, in_range=(0, 1.1), dtype=\"uint8\")\n\n    #Publish the json containing all the metadata to via MQTT to Node-RED\n    Call(client.publish, \"receiver/segmentation/name\", name)\n\n    #Filter variable to reduce memory load\n    FilterVariables(name,img)\n\n    #Save cleaned images\n    #frame_fn = Format(os.path.join(\"/home/pi/PlanktonScope/tmp\",\"CLEAN\", \"{name}.jpg\"), name=name)\n    #ImageWriter(frame_fn, img)\n\n    #Convert image to uint8 gray\n    img_gray = RGB2Gray(img)\n\n    #?\n    img_gray = Call(img_as_ubyte, img_gray)\n\n    #Canny edge detection using OpenCV\n    img_canny = Call(cv2.Canny, img_gray, 50,100)\n\n    #Dilate using OpenCV\n    kernel = Call(cv2.getStructuringElement, cv2.MORPH_ELLIPSE, (15, 15))\n    img_dilate = Call(cv2.dilate, img_canny, kernel, iterations=2)\n\n    #Close using OpenCV\n    kernel = Call(cv2.getStructuringElement, cv2.MORPH_ELLIPSE, (5, 5))\n    img_close = Call(cv2.morphologyEx, img_dilate, cv2.MORPH_CLOSE, kernel, iterations=1)\n\n    #Erode using OpenCV\n    kernel = Call(cv2.getStructuringElement, cv2.MORPH_ELLIPSE, (15, 15))\n    mask = Call(cv2.erode, img_close, kernel, iterations=2)\n\n    #Find objects\n    regionprops = FindRegions(\n        mask, img_gray, min_area=1000, padding=10, warn_empty=name\n    )\n\n    #Set the LEDs as Purple\n    Call(rgb, 255,0,255)\n\n    # For an object, extract a vignette/ROI from the image\n    roi_orig = ExtractROI(img, regionprops, bg_color=255)\n\n    # Generate an object identifier\n    i = Enumerate()\n\n    #Call(print,i)\n\n    #Define the ID of each object\n    object_id = Format(\"{name}_{i:d}\", name=name, i=i)\n\n    #Call(print,object_id)\n\n    #Define the name of each object\n    object_fn = Format(os.path.join(\"/home/pi/PlanktonScope/\",\"OBJECTS\", \"{name}.jpg\"), name=object_id)\n\n    #Save the image of the object with its name\n    ImageWriter(object_fn, roi_orig)\n\n    #Calculate features. The calculated features are added to the global_metadata.\n    #Returns a Variable representing a dict for every object in the stream.\n    meta = CalculateZooProcessFeatures(\n        regionprops, prefix=\"object_\", meta=global_metadata\n    )\n\n    #Get all the metadata\n    json_meta = Call(json.dumps,meta, sort_keys=True, default=str)\n\n    #Publish the json containing all the metadata to via MQTT to Node-RED\n    Call(client.publish, \"receiver/segmentation/metric\", json_meta)\n\n    #Add object_id to the metadata dictionary\n    meta[\"object_id\"] = object_id\n\n    #Generate object filenames\n    orig_fn = Format(\"{object_id}.jpg\", object_id=object_id)\n\n    #Write objects to an EcoTaxa archive:\n    #roi image in original color, roi image in grayscale, metadata associated with each object\n    EcotaxaWriter(archive_fn, (orig_fn, roi_orig), meta)\n\n    #Progress bar for objects\n    TQDM(Format(\"Object {object_id}\", object_id=object_id))\n\n    #Publish the object_id to via MQTT to Node-RED\n    Call(client.publish, \"receiver/segmentation/object_id\", object_id)\n\n    #Set the LEDs as Green\n    Call(rgb, 0,255,0)\n\n################################################################################\n#While loop for capting commands from Node-RED\n################################################################################\n\noutput = StreamingOutput()\naddress = ('', 8000)\nserver = StreamingServer(address, StreamingHandler)\nthreading.Thread(target=server.serve_forever).start()\ncamera.start_recording(output, format='mjpeg', resize=(640, 480))\n\nwhile True:\n\n    ############################################################################\n    #Pump Event\n    ############################################################################\n\n    #If the command is \"pump\"\n    if (command==\"pump\"):\n\n        #Set the LEDs as Blue\n        rgb(0,0,255)\n\n        #Get direction from the different received arguments\n        direction=args.split(\" \")[0]\n\n        #Get delay (in between steps) from the different received arguments\n        delay=float(args.split(\" \")[1])\n\n        #Get number of steps from the different received arguments\n        nb_step=int(args.split(\" \")[2])\n\n        #Print status\n        print(\"The pump has been started.\")\n\n        #Publish the status \"Start\" to via MQTT to Node-RED\n        client.publish(\"receiver/pump\", delay);\n\n        ########################################################################\n        while True:\n\n            #Depending on direction, select the right direction for the pump\n            if direction == \"BACKWARD\":\n                direction=stepper.BACKWARD\n\n            if direction == \"FORWARD\":\n                direction=stepper.FORWARD\n\n            #Actuate the pump for one step in the right direction\n            pump_stepper.onestep(direction=direction, style=stepper.DOUBLE)\n\n            #Increment the counter\n            counter+=1\n\n            #Wait during the delay to pump at the right flowrate\n            sleep(delay)\n\n            ####################################################################\n            #If counter reach the number of step, break\n            if counter>nb_step:\n\n                #Release the pump stepper to stop power draw\n                pump_stepper.release()\n\n                #Print status\n                print(\"The pumping is done.\")\n\n                #Change the command to not re-enter in this while loop\n                command=\"wait\"\n\n                #Publish the status \"Done\" to via MQTT to Node-RED\n                client.publish(\"receiver/pump\", \"Done\");\n\n                #Set the LEDs as Green\n                rgb(0,255,0)\n\n                #Reset the counter to 0\n                counter=0\n\n                break\n\n            ####################################################################\n            #If a new received command isn't \"pump\", break this while loop\n            if command!=\"pump\":\n\n                #Release the pump stepper to stop power draw\n                pump_stepper.release()\n\n                #Print status\n                print(\"The pump has been interrompted.\")\n\n                #Publish the status \"Interrompted\" to via MQTT to Node-RED\n                client.publish(\"receiver/pump\", \"Interrompted\");\n\n                #Set the LEDs as Green\n                rgb(0,255,0)\n\n                #Reset the counter to 0\n                counter=0\n\n                break\n\n    ############################################################################\n    #Focus Event\n    ############################################################################\n\n    #If the command is \"focus\"\n    elif (command==\"focus\"):\n\n        #Set the LEDs as Yellow\n        rgb(255,255,0)\n\n        #Get direction from the different received arguments\n        direction=args.split(\" \")[0]\n\n        #Get number of steps from the different received arguments\n        nb_step=int(args.split(\" \")[1])\n\n        #Print status\n        print(\"The focus has been started.\")\n\n        #Publish the status \"Start\" to via MQTT to Node-RED\n        client.publish(\"receiver/focus\", \"Start\");\n\n        ########################################################################\n        while True:\n\n            #Depending on direction, select the right direction for the focus\n            if direction == \"FORWARD\":\n                direction=stepper.FORWARD\n\n            if direction == \"BACKWARD\":\n                direction=stepper.BACKWARD\n\n            #Actuate the focus for one microstep in the right direction\n            focus_stepper.onestep(direction=direction, style=stepper.MICROSTEP)\n\n            #Increment the counter\n            counter+=1\n\n            ####################################################################\n            #If counter reach the number of step, break\n            if counter>nb_step:\n\n                #Release the focus steppers to stop power draw\n                focus_stepper.release()\n\n                #Print status\n                print(\"The focusing is done.\")\n\n                #Change the command to not re-enter in this while loop\n                command=\"wait\"\n\n                #Publish the status \"Done\" to via MQTT to Node-RED\n                client.publish(\"receiver/focus\", \"Done\");\n\n                #Set the LEDs as Green\n                rgb(0,255,0)\n\n                #Reset the counter to 0\n                counter=0\n\n                break\n\n            ####################################################################\n            #If a new received command isn't \"pump\", break this while loop\n            if command!=\"focus\":\n\n                #Release the focus steppers to stop power draw\n                focus_stepper.release()\n\n                #Print status\n                print(\"The stage has been interrompted.\")\n\n                #Publish the status \"Done\" to via MQTT to Node-RED\n                client.publish(\"receiver/focus\", \"Interrompted\");\n\n                #Set the LEDs as Green\n                rgb(0,255,0)\n\n                #Reset the counter to 0\n                counter=0\n\n                break\n\n    ############################################################################\n    #Image Event\n    ############################################################################\n\n    elif (command==\"image\"):\n\n        #Get duration to wait before an image from the different received arguments\n        sleep_before=int(args.split(\" \")[0])\n\n        #Get number of step in between two images from the different received arguments\n        nb_step=int(args.split(\" \")[1])\n\n        #Get the number of frames to image from the different received arguments\n        nb_frame=int(args.split(\" \")[2])\n\n        #Sleep a duration before to start acquisition\n        sleep(sleep_before)\n\n        #Publish the status \"Start\" to via MQTT to Node-RED\n        client.publish(\"receiver/image\", \"Start\");\n\n        #Set the LEDs as Blue\n        rgb(0,0,255)\n\n        #Pump duing a given number of steps (in between each image)\n        for i in range(nb_step):\n\n            #If the command is still image - pump a defined nb of steps\n            if (command==\"image\"):\n\n                #Actuate the pump for one step in the FORWARD direction\n                pump_stepper.onestep(direction=stepper.FORWARD, style=stepper.DOUBLE)\n\n                #The flowrate is fixed for now.\n                sleep(0.01)\n\n            #If the command isn't image anymore - break\n            else:\n\n                break\n\n\n        #Set the LEDs as Green\n        rgb(0,255,0)\n\n        while True:\n            #Release the pump stepper to stop power draw\n            pump_stepper.release()\n\n            #Set the LEDs as Cyan\n            rgb(0,255,255)\n\n            #Increment the counter\n            counter+=1\n\n            #Get datetime\n            datetime_tmp=datetime.now().strftime(\"%H_%M_%S_%f\")\n\n            #Print datetime\n            print(datetime_tmp)\n\n            #Define the filename of the image\n            filename = os.path.join(\"/home/pi/PlanktonScope/tmp\",datetime_tmp+\".jpg\")\n\n            #Capture an image with the proper filename\n            camera.capture(filename)\n\n            #Set the LEDs as Green\n            rgb(0,255,0)\n\n            #Publish the name of the image to via MQTT to Node-RED\n\n            client.publish(\"receiver/image\", datetime_tmp+\".jpg has been imaged.\");\n            \n            #Set the LEDs as Blue\n            rgb(0,0,255)\n\n            #Pump during a given nb of steps\n            for i in range(nb_step):\n\n                #Actuate the pump for one step in the FORWARD direction\n                pump_stepper.onestep(direction=stepper.FORWARD, style=stepper.DOUBLE)\n\n                #The flowrate is fixed for now.\n                sleep(0.01)\n\n            #Wait a fixed delay which set the framerate as < than 2 imag/sec\n            sleep(0.5)\n\n            #Set the LEDs as Green\n            rgb(0,255,0)\n\n            ####################################################################\n            #If counter reach the number of frame, break\n            if(counter>nb_frame):\n\n                #Publish the status \"Completed\" to via MQTT to Node-RED\n                client.publish(\"receiver/image\", \"Completed\");\n\n                #Release the pump steppers to stop power draw\n                pump_stepper.release()\n\n                #Publish the status \"Start\" to via MQTT to Node-RED\n                client.publish(\"receiver/segmentation\", \"Start\");\n\n                #Start the MorphoCut Pipeline\n                p.run()\n\n                #remove directory\n                #shutil.rmtree(import_path)\n\n                #Publish the status \"Completed\" to via MQTT to Node-RED\n                client.publish(\"receiver/segmentation\", \"Completed\");\n\n                #Set the LEDs as White\n                rgb(255,255,255)\n\n                sample_project=node_red_metadata['sample_project'];\n                \n                acq_id=node_red_metadata['acq_id'];\n                \n                export_name = str(sample_project)+\"_\"+str(acq_id)+\".zip\"\n                \n                \n                os.popen(\"mv /home/pi/PlanktonScope/export/ecotaxa_export.zip /home/pi/PlanktonScope/export/\"+export_name)\n                \n                os.popen(\"rm -rf /home/pi/PlanktonScope/tmp/*.jpg\")\n                \n                os.popen(\"rm -rf /home/pi/PlanktonScope/OBJECTS/*.jpg\")\n                \n\n                #Let it happen\n                sleep(1)\n\n                #Set the LEDs as Green\n                rgb(0,255,0)\n\n\n                #Change the command to not re-enter in this while loop\n                command=\"wait\"\n                    \n                #Set the LEDs as Green\n                rgb(0,255,255)\n\n                #Reset the counter to 0\n                counter=0\n\n                break\n\n            ####################################################################\n            #If a new received command isn't \"image\", break this while loop\n            if command!=\"image\":\n\n                #Release the pump steppers to stop power draw\n                pump_stepper.release()\n\n                #Print status\n                print(\"The imaging has been interrompted.\")\n\n                #Publish the status \"Interrompted\" to via MQTT to Node-RED\n                client.publish(\"receiver/image\", \"Interrompted\");\n\n                #Set the LEDs as Green\n                rgb(0,255,0)\n\n                #Reset the counter to 0\n                counter=0\n\n                break\n\n    else:\n        #Its just waiting to receive command from Node-RED\n        sleep(0.4)\n",
        "output": "str",
        "x": 300,
        "y": 100,
        "wires": [
            [
                "fd813497.f44d5"
            ]
        ]
    },
    {
        "id": "10348484.8ca5b3",
        "type": "exec",
        "z": "435c6174.e0c8b",
        "command": "ps -ax | grep \"python3.7 /home/pi/PlanktonScope/script/main.py\"| head -1 | awk -F \" \" '{print$1}' ",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 430,
        "y": 40,
        "wires": [
            [
                "b41e729d.a3042"
            ],
            [],
            []
        ]
    },
    {
        "id": "b41e729d.a3042",
        "type": "exec",
        "z": "435c6174.e0c8b",
        "command": "kill",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 870,
        "y": 40,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "e49710cf.c4831",
        "type": "delay",
        "z": "435c6174.e0c8b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 160,
        "y": 100,
        "wires": [
            [
                "a2e43b6f.3b73a"
            ]
        ]
    },
    {
        "id": "a105d7c9.07d71",
        "type": "ui_text_input",
        "z": "4273b9bf.bb07a8",
        "name": "custom_nb_step",
        "label": "Number of steps in between two images",
        "tooltip": "",
        "group": "6fdfb3ec.fd451c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "custom_nb_step",
        "x": 540,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "530d8426.5c4bec",
        "type": "ui_text_input",
        "z": "4273b9bf.bb07a8",
        "name": "custom_nb_frame",
        "label": "Number of images per acquisition",
        "tooltip": "",
        "group": "6fdfb3ec.fd451c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "custom_nb_frame",
        "x": 530,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "55d70110.127d38",
        "type": "function",
        "z": "4273b9bf.bb07a8",
        "name": "get custom_nb_step",
        "func": "msg.payload = msg.payload.custom_nb_step;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 80,
        "wires": [
            [
                "a105d7c9.07d71"
            ]
        ]
    },
    {
        "id": "ec5967a.409eb18",
        "type": "function",
        "z": "4273b9bf.bb07a8",
        "name": "get custom_nb_frame",
        "func": "msg.payload = msg.payload.custom_nb_frame;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "530d8426.5c4bec"
            ]
        ]
    },
    {
        "id": "4e6a3b73.7472d4",
        "type": "function",
        "z": "4273b9bf.bb07a8",
        "name": "get custom_sleep_before",
        "func": "msg.payload = msg.payload.custom_sleep_before;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 40,
        "wires": [
            [
                "816c19e2.f940e"
            ]
        ]
    },
    {
        "id": "816c19e2.f940e",
        "type": "ui_text_input",
        "z": "4273b9bf.bb07a8",
        "name": "custom_sleep_before",
        "label": "Duration before the acquisition (s)",
        "tooltip": "",
        "group": "6fdfb3ec.fd451c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "custom_sleep_before",
        "x": 520,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7bad3862.c22b5",
        "type": "ui_text_input",
        "z": "4d3786dd.dd79f",
        "name": "process_id",
        "label": "Id of the process",
        "tooltip": "",
        "group": "c32bf44c.3b67a8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "process_id",
        "x": 550,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7228965.6f65ae8",
        "type": "function",
        "z": "4d3786dd.dd79f",
        "name": "get process_id",
        "func": "msg.payload = msg.payload.process_id+1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "7bad3862.c22b5"
            ]
        ]
    },
    {
        "id": "3b44178c.9bb6c",
        "type": "mqtt in",
        "z": "20bc0424.146724",
        "name": "",
        "topic": "receiver/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "6e9cdee.ac3c2a",
        "x": 60,
        "y": 40,
        "wires": [
            [
                "3e32282.7051d58"
            ]
        ]
    },
    {
        "id": "3e32282.7051d58",
        "type": "switch",
        "z": "20bc0424.146724",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "receiver/pump",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "receiver/focus",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "receiver/image",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "receiver/segmentation",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 250,
        "y": 40,
        "wires": [
            [
                "eb8571ec.dd894"
            ],
            [
                "f3e7c870.e91ed"
            ],
            [
                "49534f95.047038"
            ],
            [
                "48e4e2bb.9bb35c"
            ]
        ]
    },
    {
        "id": "eb8571ec.dd894",
        "type": "switch",
        "z": "20bc0424.146724",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Done",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Interrompted",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 410,
        "y": 40,
        "wires": [
            [
                "2981833a.c8f3f4"
            ],
            [
                "a9bc22d0.246c98"
            ],
            [
                "13f11422.180f9c"
            ]
        ]
    },
    {
        "id": "2981833a.c8f3f4",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The pump has started",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The pump has started",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 40,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "a9bc22d0.246c98",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The pump has finished.",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The pump has finished.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 80,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "13f11422.180f9c",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The pump has been stopped.",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The pump has been stopped.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 120,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "f3e7c870.e91ed",
        "type": "switch",
        "z": "20bc0424.146724",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Done",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Interrompted",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 410,
        "y": 100,
        "wires": [
            [
                "d070dadb.1463a"
            ],
            [
                "4c014eb.3f18a3"
            ],
            [
                "c31116f4.7e8488"
            ]
        ]
    },
    {
        "id": "d070dadb.1463a",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The focus has started",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The focus has started",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 180,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "4c014eb.3f18a3",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The focus has finished.",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The focus has finished.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 220,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "c31116f4.7e8488",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The focus has been stopped.",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The focus has been stopped.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 260,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "49534f95.047038",
        "type": "switch",
        "z": "20bc0424.146724",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Done",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Interrompted",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "jpg",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 410,
        "y": 160,
        "wires": [
            [
                "bf293c7.2c0f14"
            ],
            [
                "ef3bc36b.edc53"
            ],
            [
                "8404a654.b21db"
            ],
            [
                "738a3754.b91708"
            ]
        ]
    },
    {
        "id": "a555d3d.d63e83",
        "type": "switch",
        "z": "20bc0424.146724",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 520,
        "wires": [
            [
                "8b4cf492.155ee"
            ],
            [
                "31fa24f3.9545bc"
            ]
        ]
    },
    {
        "id": "ef3bc36b.edc53",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The acquisition has finished.",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The acquisition has finished.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 360,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "8404a654.b21db",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The acquisition has been stopped.",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The acquisition has been stopped.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 400,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "bf293c7.2c0f14",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The acquisition has started",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The acquisition has started",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 320,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "738a3754.b91708",
        "type": "function",
        "z": "20bc0424.146724",
        "name": "img_counter.js",
        "func": "img_counter=global.get('img_counter')\nimg_counter=img_counter+1\nglobal.set('img_counter',img_counter)\nmsg.payload = img_counter\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 780,
        "y": 440,
        "wires": [
            [
                "cec2bb6c.85ec3"
            ]
        ]
    },
    {
        "id": "4aa5af79.20b3c8",
        "type": "function",
        "z": "20bc0424.146724",
        "name": "obj_counter.js",
        "func": "obj_counter=global.get('obj_counter')\nobj_counter=obj_counter+1\nglobal.set('obj_counter',obj_counter)\nmsg.payload = obj_counter\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 780,
        "y": 580,
        "wires": [
            [
                "d21603af.53b258"
            ]
        ]
    },
    {
        "id": "cec2bb6c.85ec3",
        "type": "ui_chart",
        "z": "20bc0424.146724",
        "name": "img_counter",
        "group": "1f183a1c.7d2846",
        "order": 1,
        "width": 24,
        "height": 2,
        "label": "img_counter",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 950,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "48e4e2bb.9bb35c",
        "type": "switch",
        "z": "20bc0424.146724",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "receiver/segmentation",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "receiver/segmentation/name",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "receiver/segmentation/object_id",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "receiver/segmentation/metric",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 450,
        "y": 540,
        "wires": [
            [
                "a555d3d.d63e83"
            ],
            [
                "dec9dc45.e0709"
            ],
            [
                "4aa5af79.20b3c8"
            ],
            [
                "d5a84642.dc7618"
            ]
        ]
    },
    {
        "id": "31fa24f3.9545bc",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The segmentation has finished.",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The segmentation has finished.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 540,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "8b4cf492.155ee",
        "type": "change",
        "z": "20bc0424.146724",
        "name": "The segmentation has started",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The segmentation has started",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 500,
        "wires": [
            [
                "1b713e4c.48b6ca"
            ]
        ]
    },
    {
        "id": "d21603af.53b258",
        "type": "ui_chart",
        "z": "20bc0424.146724",
        "name": "obj_counter",
        "group": "1f183a1c.7d2846",
        "order": 2,
        "width": 24,
        "height": 2,
        "label": "obj_counter",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 950,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "7f712083.ec5c78",
        "type": "function",
        "z": "20bc0424.146724",
        "name": "ex : area",
        "func": "msg.payload=msg.payload.object_area\nmsg.topic=\"area\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 640,
        "wires": [
            [
                "65556e24.4e09c"
            ]
        ]
    },
    {
        "id": "d5a84642.dc7618",
        "type": "json",
        "z": "20bc0424.146724",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 650,
        "y": 640,
        "wires": [
            [
                "7f712083.ec5c78"
            ]
        ]
    },
    {
        "id": "1b713e4c.48b6ca",
        "type": "ui_toast",
        "z": "20bc0424.146724",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1260,
        "y": 260,
        "wires": []
    },
    {
        "id": "65556e24.4e09c",
        "type": "ui_chart",
        "z": "20bc0424.146724",
        "name": "chart area",
        "group": "1f183a1c.7d2846",
        "order": 3,
        "width": 24,
        "height": 7,
        "label": "chart area",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 960,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "dec9dc45.e0709",
        "type": "debug",
        "z": "20bc0424.146724",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 690,
        "y": 720,
        "wires": []
    },
    {
        "id": "2c9233f6.a62024",
        "type": "ui_button",
        "z": "7aea7e49.4a3c88",
        "name": "",
        "group": "1f044bf8.be704c",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": false,
        "label": "Reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "",
        "payload": "off",
        "payloadType": "str",
        "topic": "reboot",
        "x": 240,
        "y": 80,
        "wires": [
            [
                "bb7e6003.313188"
            ]
        ]
    },
    {
        "id": "6e86ac0a.07e534",
        "type": "exec",
        "z": "7aea7e49.4a3c88",
        "command": "sudo",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "2",
        "oldrc": false,
        "name": "cmd",
        "x": 530,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2b27e400.5709ac",
        "type": "ui_button",
        "z": "7aea7e49.4a3c88",
        "name": "",
        "group": "1f044bf8.be704c",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": false,
        "label": "Shutdown",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "",
        "payload": "off",
        "payloadType": "str",
        "topic": "shutdown",
        "x": 240,
        "y": 140,
        "wires": [
            [
                "bb7e6003.313188"
            ]
        ]
    },
    {
        "id": "bb7e6003.313188",
        "type": "python3-function",
        "z": "7aea7e49.4a3c88",
        "name": "action",
        "func": "#!/usr/bin/python\nimport smbus\nimport time\nbus = smbus.SMBus(1)\ntime.sleep(1)\n#turn off fan RGB\nbus.write_byte_data(0x0d, 0x07, 0x00)\nbus.write_byte_data(0x0d, 0x07, 0x00)\n\nmsg[\"payload\"] = str(msg[\"topic\"])+' now'\nreturn msg",
        "outputs": 1,
        "x": 390,
        "y": 100,
        "wires": [
            [
                "91077c4d.e71e48",
                "6e86ac0a.07e534"
            ]
        ]
    },
    {
        "id": "91077c4d.e71e48",
        "type": "exec",
        "z": "7aea7e49.4a3c88",
        "command": "i2cdetect -y 1",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "1",
        "oldrc": false,
        "name": "i2c update",
        "x": 550,
        "y": 140,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d7ac6b26.75e388",
        "type": "ui_numeric",
        "z": "672ac548.1a9bac",
        "name": "object_depth_min",
        "label": "Minimum depth (m)",
        "tooltip": "",
        "group": "2f95b761.bd818",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "object_depth_min",
        "format": "{{value}}",
        "min": "0",
        "max": "2000",
        "step": "1",
        "x": 610,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "70dcbf49.4b0e6",
        "type": "ui_numeric",
        "z": "672ac548.1a9bac",
        "name": "object_depth_max",
        "label": "Maximum depth (m)",
        "tooltip": "",
        "group": "2f95b761.bd818",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "object_depth_max",
        "format": "{{value}}",
        "min": "0",
        "max": "2000",
        "step": "1",
        "x": 610,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "46ef98a.3d3e8e8",
        "type": "function",
        "z": "672ac548.1a9bac",
        "name": "get object_depth_min",
        "func": "msg.payload = msg.payload.object_depth_min;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 304,
        "y": 120,
        "wires": [
            [
                "d7ac6b26.75e388"
            ]
        ]
    },
    {
        "id": "e6b2a290.7593c8",
        "type": "function",
        "z": "672ac548.1a9bac",
        "name": "get object_depth_max",
        "func": "msg.payload = msg.payload.object_depth_max;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 304,
        "y": 160,
        "wires": [
            [
                "70dcbf49.4b0e6"
            ]
        ]
    },
    {
        "id": "8cfa2316.5a9788",
        "type": "gpsd",
        "z": "672ac548.1a9bac",
        "name": "",
        "hostname": "localhost",
        "port": "2947",
        "tpv": true,
        "sky": false,
        "info": false,
        "device": false,
        "gst": false,
        "att": false,
        "x": 90,
        "y": 220,
        "wires": [
            [
                "61bc4942.96a3d"
            ]
        ]
    },
    {
        "id": "7d5ce5c2.2cb0f4",
        "type": "ui_worldmap",
        "z": "672ac548.1a9bac",
        "d": true,
        "group": "2f95b761.bd818",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "lat": "1.5",
        "lon": "1.5",
        "zoom": "4",
        "layer": "OSM grey",
        "cluster": "1",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "deg",
        "showgrid": "false",
        "path": "/worldmap",
        "x": 640,
        "y": 200,
        "wires": []
    },
    {
        "id": "61bc4942.96a3d",
        "type": "function",
        "z": "672ac548.1a9bac",
        "name": "get object_lat & object_lon",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "7d5ce5c2.2cb0f4"
            ]
        ]
    },
    {
        "id": "415b9f0c.5f0b48",
        "type": "function",
        "z": "672ac548.1a9bac",
        "name": "set object_time",
        "func": "var time = new Date(msg.payload);\n\nvar hour = time.getUTCHours();\nif (hour<10){hour = \"0\"+hour;}\nvar minute = time.getUTCMinutes();\nif (minute<10){minute = \"0\"+minute;}\n\nvar time_UTC = \"\"+hour+minute;\nglobal.set('object_time',time_UTC);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3e9ae6e6.35b942",
        "type": "function",
        "z": "672ac548.1a9bac",
        "name": "set object_date",
        "func": "var date = new Date(msg.payload);\n\nvar year = date.getUTCFullYear();\nvar month = date.getUTCMonth()+1;\nif (month<10){month = \"0\"+month;}\nvar day = date.getUTCDate();\nif (day<10){day = \"0\"+day;}\n\nvar date_UTC = \"\"+year+month+day;\nglobal.set('object_date',date_UTC);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "79923da9.365d7c",
        "type": "function",
        "z": "5163a57b.0008b4",
        "name": "set optical config",
        "func": "global.set(msg.topic,msg.payload);\nvar acq_fnumber_objective = String(global.get(msg.topic));\n\nswitch(acq_fnumber_objective) {\n  case \"25\":\n    global.set(\"acq_magnification\",0.6);\n    global.set(\"process_pixel\",1.86);\n    global.set(\"sug_min\",60);\n    global.set(\"sug_max\",670);\n    global.set(\"sug_flowrate\",3);\n    break;\n  case \"16\":\n    global.set(\"acq_magnification\",0.94);\n    global.set(\"process_pixel\",1.19);\n    global.set(\"sug_min\",40);\n    global.set(\"sug_max\",430);\n    global.set(\"sug_flowrate\",2.4);\n    break;\n  case \"12\":\n    global.set(\"acq_magnification\",1.20);\n    global.set(\"process_pixel\",0.94);\n    global.set(\"sug_min\",30);\n    global.set(\"sug_max\",340);\n    global.set(\"sug_flowrate\",1.25);\n    break;\n  case \"8\":\n    global.set(\"acq_magnification\",1.78);\n    global.set(\"process_pixel\",0.63);\n    global.set(\"sug_min\",20);\n    global.set(\"sug_max\",230);\n    global.set(\"sug_flowrate\",0.42);\n    break;\n  case \"6\":\n    global.set(\"acq_magnification\",2.36);\n    global.set(\"process_pixel\",0.48);\n    global.set(\"sug_min\",15);\n    global.set(\"sug_max\",170);\n    global.set(\"sug_flowrate\",0.32);\n    break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "cba1919b.aae78",
        "type": "ui_dropdown",
        "z": "5163a57b.0008b4",
        "name": "acq_fnumber_objective",
        "label": "M12 Lens*",
        "tooltip": "",
        "place": "Select option",
        "group": "14742691.56c8c1",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "f 25mm 1/2\" 5MP IR",
                "value": 25,
                "type": "num"
            },
            {
                "label": "f 16mm 1/2.5\" 5MP IR",
                "value": 16,
                "type": "num"
            },
            {
                "label": "f 12mm 1/2.5\" 5MP IR",
                "value": 12,
                "type": "num"
            },
            {
                "label": "f 8mm 1/2.5\" 5MP IR",
                "value": 8,
                "type": "num"
            },
            {
                "label": "f 6mm 1/2.5\" 5MP IR",
                "value": 6,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "acq_fnumber_objective",
        "x": 526,
        "y": 360,
        "wires": [
            [
                "79923da9.365d7c"
            ]
        ]
    },
    {
        "id": "ebcf7cae.9e21c8",
        "type": "ui_numeric",
        "z": "5163a57b.0008b4",
        "name": "acq_minimum_mesh",
        "label": "Min fraction size (μm)",
        "tooltip": "",
        "group": "14742691.56c8c1",
        "order": 8,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "acq_minimum_mesh",
        "format": "{{value}}",
        "min": 0,
        "max": "300",
        "step": "10",
        "x": 536,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7291a2a3.c9a974",
        "type": "ui_numeric",
        "z": "5163a57b.0008b4",
        "name": "acq_maximum_mesh",
        "label": "Max fraction size (μm)",
        "tooltip": "",
        "group": "14742691.56c8c1",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "acq_maximum_mesh",
        "format": "{{value}}",
        "min": "200",
        "max": "2000",
        "step": "100",
        "x": 536,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "52374b71.714fd4",
        "type": "ui_text_input",
        "z": "5163a57b.0008b4",
        "name": "acq_id",
        "label": "Acquisition unique ID*",
        "tooltip": "",
        "group": "14742691.56c8c1",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "acq_id",
        "x": 586,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "2cf276d8.880672",
        "type": "ui_dropdown",
        "z": "5163a57b.0008b4",
        "name": "acq_celltype",
        "label": "Thickness flowcell*",
        "tooltip": "",
        "place": "Select option",
        "group": "14742691.56c8c1",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "200 μm µ-Slide I Luer",
                "value": 200,
                "type": "num"
            },
            {
                "label": "400 μm µ-Slide I Luer",
                "value": 400,
                "type": "num"
            },
            {
                "label": "600 μm µ-Slide I Luer",
                "value": 600,
                "type": "num"
            },
            {
                "label": "800 μm µ-Slide I Luer",
                "value": 800,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "acq_celltype",
        "x": 566,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "25294db5.4fe722",
        "type": "ui_text_input",
        "z": "5163a57b.0008b4",
        "name": "acq_volume",
        "label": "Volume to pass (ml)",
        "tooltip": "",
        "group": "14742691.56c8c1",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "acq_volume",
        "x": 566,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "858ed565.0993b8",
        "type": "ui_text_input",
        "z": "5163a57b.0008b4",
        "name": "acq_instrument",
        "label": "Acquisition instrument",
        "tooltip": "PlanktonScope V2.1",
        "group": "14742691.56c8c1",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "acq_instrument",
        "x": 556,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7c09012f.b50098",
        "type": "function",
        "z": "5163a57b.0008b4",
        "name": "get acq_id",
        "func": "msg.payload = msg.payload.acq_id+1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 40,
        "wires": [
            [
                "52374b71.714fd4"
            ]
        ]
    },
    {
        "id": "3e3b0646.cf9a1a",
        "type": "function",
        "z": "5163a57b.0008b4",
        "name": "get acq_instrument",
        "func": "msg.payload = msg.payload.acq_instrument;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "858ed565.0993b8"
            ]
        ]
    },
    {
        "id": "2b4282c2.8752ae",
        "type": "function",
        "z": "5163a57b.0008b4",
        "name": "get acq_celltype",
        "func": "msg.payload = msg.payload.acq_celltype;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "2cf276d8.880672"
            ]
        ]
    },
    {
        "id": "90439ce.e3524e",
        "type": "function",
        "z": "5163a57b.0008b4",
        "name": "get acq_minimum_mesh",
        "func": "msg.payload = msg.payload.acq_minimum_mesh;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 160,
        "wires": [
            [
                "ebcf7cae.9e21c8"
            ]
        ]
    },
    {
        "id": "7f710823.92974",
        "type": "function",
        "z": "5163a57b.0008b4",
        "name": "get acq_maximum_mesh",
        "func": "msg.payload = msg.payload.acq_maximum_mesh;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 200,
        "wires": [
            [
                "7291a2a3.c9a974"
            ]
        ]
    },
    {
        "id": "9355d580.a2338",
        "type": "function",
        "z": "5163a57b.0008b4",
        "name": "get acq_volume",
        "func": "msg.payload = msg.payload.acq_volume;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 240,
        "wires": [
            [
                "25294db5.4fe722"
            ]
        ]
    },
    {
        "id": "218c020a.2b0566",
        "type": "function",
        "z": "5163a57b.0008b4",
        "name": "get acq_fnumber_objective",
        "func": "msg.payload = msg.payload.acq_fnumber_objective;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 360,
        "wires": [
            [
                "cba1919b.aae78"
            ]
        ]
    },
    {
        "id": "4cfd49e3.3db3c",
        "type": "ui_numeric",
        "z": "5163a57b.0008b4",
        "name": "acq_min_esd",
        "label": "Minimum size to segment (μm)",
        "tooltip": "",
        "group": "14742691.56c8c1",
        "order": 9,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "acq_min_esd",
        "format": "{{value}}",
        "min": 0,
        "max": "300",
        "step": "5",
        "x": 566,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7dbb773.926b488",
        "type": "ui_numeric",
        "z": "5163a57b.0008b4",
        "name": "acq_max_esd",
        "label": "Maximum size to segment (μm)",
        "tooltip": "",
        "group": "14742691.56c8c1",
        "order": 5,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "acq_max_esd",
        "format": "{{value}}",
        "min": "100",
        "max": "2000",
        "step": "5",
        "x": 556,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c8be3f91.8686e",
        "type": "function",
        "z": "5163a57b.0008b4",
        "name": "get acq_min_esd",
        "func": "msg.payload = msg.payload.acq_min_esd;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 280,
        "wires": [
            [
                "4cfd49e3.3db3c"
            ]
        ]
    },
    {
        "id": "98bb1c89.99c7b8",
        "type": "function",
        "z": "5163a57b.0008b4",
        "name": "get acq_max_esd",
        "func": "msg.payload = msg.payload.acq_max_esd;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 320,
        "wires": [
            [
                "7dbb773.926b488"
            ]
        ]
    },
    {
        "id": "1796cf8d.f042",
        "type": "function",
        "z": "b1edcbe7.366f7",
        "name": "pump.js",
        "func": "state = global.get(\"state\");\n\nif (state == null){state=\"free\"}\n\nvar manual_volume= global.get(\"pump_manual_volume\");\nvar flowrate= global.get(\"pump_flowrate\");\n\nif (manual_volume === undefined || manual_volume === \"\" || manual_volume === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Volume to pass\";\n    \n}else if (flowrate === undefined || flowrate === \"\" || flowrate === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Flowrate\";\n    \n}else {\n    volume = global.get(\"pump_manual_volume\");\n    nb_step=volume*507\n    msg.volume = volume;\n    flowrate = global.get(\"pump_flowrate\");\n    duration=(volume*60)/flowrate\n    delay=(duration/nb_step)-0.005\n    msg.topic = \"actuator/pump\";\n    \n    if(msg.payload === \"FORWARD\" & state===\"free\"){\n        msg.payload='FORWARD '+delay+' '+nb_step;\n    }\n    if(msg.payload === \"BACKWARD\" & state===\"free\"){\n        msg.payload='BACKWARD '+delay+' '+nb_step;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 140,
        "wires": [
            [
                "3b3a975.caa1a68"
            ]
        ],
        "info": "### Focusing\n##### focus.py `nb_step` `orientation`\n\n- `nb_step` : **integer** (from 1 to 100000) - number of step to perform by the stage (about 31um/step)\n- `orientation` : **string** - orientation of the focus either `up` or `down`\n\nExample:\n\n    python3.7 $HOME/PlanktonScope/scripts/focus.py 650 up\n"
    },
    {
        "id": "3b125ba5.2878ac",
        "type": "ui_button",
        "z": "b1edcbe7.366f7",
        "name": "BACKWARD",
        "group": "517b2aa5.93722c",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "arrow_back",
        "payload": "BACKWARD",
        "payloadType": "str",
        "topic": "actuator/pump",
        "x": 470,
        "y": 120,
        "wires": [
            [
                "1796cf8d.f042"
            ]
        ]
    },
    {
        "id": "daa07581.f5474",
        "type": "ui_button",
        "z": "b1edcbe7.366f7",
        "name": "FORWARD",
        "group": "517b2aa5.93722c",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "arrow_forward",
        "payload": "FORWARD",
        "payloadType": "str",
        "topic": "actuator/pump",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "1796cf8d.f042"
            ]
        ]
    },
    {
        "id": "3b3a975.caa1a68",
        "type": "switch",
        "z": "b1edcbe7.366f7",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "actuator/pump",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Missing entry :",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 140,
        "wires": [
            [
                "70b4938.deb706c"
            ],
            [
                "67845166.ed2bd8"
            ]
        ]
    },
    {
        "id": "67845166.ed2bd8",
        "type": "ui_toast",
        "z": "b1edcbe7.366f7",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 930,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3bbe77de.da4bc",
        "type": "ui_button",
        "z": "b1edcbe7.366f7",
        "name": "stop pump",
        "group": "517b2aa5.93722c",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": true,
        "label": "STOP PUMP",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "",
        "payload": "off",
        "payloadType": "str",
        "topic": "actuator/wait",
        "x": 470,
        "y": 200,
        "wires": [
            [
                "e441856c.84eb58"
            ]
        ]
    },
    {
        "id": "70b4938.deb706c",
        "type": "mqtt out",
        "z": "b1edcbe7.366f7",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e6efd12e.dedae8",
        "x": 910,
        "y": 120,
        "wires": []
    },
    {
        "id": "e441856c.84eb58",
        "type": "mqtt out",
        "z": "b1edcbe7.366f7",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e6efd12e.dedae8",
        "x": 610,
        "y": 200,
        "wires": []
    },
    {
        "id": "8cab4571.004668",
        "type": "ui_text_input",
        "z": "b1edcbe7.366f7",
        "name": "pump_manual_volume",
        "label": "Volume to pass (ml)",
        "tooltip": "",
        "group": "517b2aa5.93722c",
        "order": 3,
        "width": 8,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "pump_manual_volume",
        "x": 480,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e3472832.6c2cc8",
        "type": "function",
        "z": "b1edcbe7.366f7",
        "name": "get pump_manual_volume",
        "func": "msg.payload = msg.payload.pump_manual_volume;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 80,
        "wires": [
            [
                "8cab4571.004668"
            ]
        ]
    },
    {
        "id": "1f1c2de7.b242f2",
        "type": "ui_slider",
        "z": "b1edcbe7.366f7",
        "name": "pump_flowrate",
        "label": "Flowrate (ml/min)*",
        "tooltip": "",
        "group": "517b2aa5.93722c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "pump_flowrate",
        "min": 0,
        "max": "20",
        "step": "0.1",
        "x": 500,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "66f2533e.b3080c",
        "type": "function",
        "z": "b1edcbe7.366f7",
        "name": "get pump_flowrate",
        "func": "msg.payload = msg.payload.pump_flowrate;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 190,
        "y": 40,
        "wires": [
            [
                "1f1c2de7.b242f2"
            ]
        ]
    },
    {
        "id": "3df51223.81e336",
        "type": "ui_text_input",
        "z": "3df4e02.36602a",
        "name": "focus_nb_step",
        "label": "Number of step(s)",
        "tooltip": "",
        "group": "88613aab.984d18",
        "order": 2,
        "width": 8,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "focus_nb_step",
        "x": 540,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ba9fc5ee.19aee8",
        "type": "function",
        "z": "3df4e02.36602a",
        "name": "get focus_nb_step",
        "func": "msg.payload = msg.payload.focus_nb_step;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 40,
        "wires": [
            [
                "3df51223.81e336"
            ]
        ]
    },
    {
        "id": "eea8d416.05154",
        "type": "ui_button",
        "z": "3df4e02.36602a",
        "name": "DOWN",
        "group": "88613aab.984d18",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "arrow_downward",
        "payload": "DOWN",
        "payloadType": "str",
        "topic": "actuator/focus",
        "x": 520,
        "y": 120,
        "wires": [
            [
                "89b8374.e9624c8"
            ]
        ]
    },
    {
        "id": "28579233.6aa0e6",
        "type": "ui_button",
        "z": "3df4e02.36602a",
        "name": "UP",
        "group": "88613aab.984d18",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "arrow_upwards",
        "payload": "UP",
        "payloadType": "str",
        "topic": "actuator/focus",
        "x": 530,
        "y": 81,
        "wires": [
            [
                "89b8374.e9624c8"
            ]
        ]
    },
    {
        "id": "43bc6030.03b3b8",
        "type": "switch",
        "z": "3df4e02.36602a",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "actuator/focus",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Missing entry :",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 100,
        "wires": [
            [
                "77e14fc9.c1287"
            ],
            [
                "735be178.b56c28"
            ]
        ]
    },
    {
        "id": "735be178.b56c28",
        "type": "ui_toast",
        "z": "3df4e02.36602a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 970,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "89b8374.e9624c8",
        "type": "function",
        "z": "3df4e02.36602a",
        "name": "focus.js",
        "func": "state = global.get(\"state\");\n\nif (state == null){state=\"free\"}\n\nvar nb_step= global.get(\"focus_nb_step\");\n\nif (nb_step === undefined || nb_step === \"\" || nb_step === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Number of steps\";\n    \n}else {\n    nb_step= global.get(\"focus_nb_step\");\n    if(msg.payload === \"UP\" & state===\"free\"){\n        msg.payload=\"FORWARD \"+nb_step;\n    }\n    if(msg.payload === \"DOWN\" & state===\"free\"){\n        msg.payload=\"BACKWARD \"+nb_step;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 100,
        "wires": [
            [
                "43bc6030.03b3b8"
            ]
        ],
        "info": "### Focusing\n##### focus.py `nb_step` `orientation`\n\n- `nb_step` : **integer** (from 1 to 100000) - number of step to perform by the stage (about 31um/step)\n- `orientation` : **string** - orientation of the focus either `up` or `down`\n\nExample:\n\n    python3.7 $HOME/PlanktonScope/scripts/focus.py 650 up\n"
    },
    {
        "id": "c96e9b7a.34961",
        "type": "ui_button",
        "z": "3df4e02.36602a",
        "name": "stop focus",
        "group": "88613aab.984d18",
        "order": 4,
        "width": 4,
        "height": 1,
        "passthru": true,
        "label": "STOP FOCUS",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "",
        "payload": "off",
        "payloadType": "str",
        "topic": "actuator/wait",
        "x": 510,
        "y": 160,
        "wires": [
            [
                "f22aeb5d.5a0d2"
            ]
        ]
    },
    {
        "id": "77e14fc9.c1287",
        "type": "mqtt out",
        "z": "3df4e02.36602a",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e6efd12e.dedae8",
        "x": 950,
        "y": 80,
        "wires": []
    },
    {
        "id": "f22aeb5d.5a0d2",
        "type": "mqtt out",
        "z": "3df4e02.36602a",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e6efd12e.dedae8",
        "x": 650,
        "y": 160,
        "wires": []
    },
    {
        "id": "ccb4ce9e.4f9108",
        "type": "ui_text_input",
        "z": "6bc47c75.93e24c",
        "name": "sample_ship",
        "label": "Name of the ship",
        "tooltip": "",
        "group": "bfdb5a44.4223",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "sample_ship",
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "50431d7c.cc673c",
        "type": "ui_dropdown",
        "z": "6bc47c75.93e24c",
        "name": "sample_sampling_gear",
        "label": "Sampling gear",
        "tooltip": "",
        "place": "Select",
        "group": "bfdb5a44.4223",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "Plankton net",
                "value": "net",
                "type": "str"
            },
            {
                "label": "Niskin bottle 12L",
                "value": "niskin_12L",
                "type": "str"
            },
            {
                "label": "Niskin bottle 24L",
                "value": "niskin_24L",
                "type": "str"
            },
            {
                "label": "Pass Hull",
                "value": "pass_hull",
                "type": "str"
            },
            {
                "label": "Flask",
                "value": "flask",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "sample_sampling_gear",
        "x": 550,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d76b1790.9ffc2",
        "type": "ui_text_input",
        "z": "6bc47c75.93e24c",
        "name": "sample_operator",
        "label": "Name of the operator",
        "tooltip": "",
        "group": "bfdb5a44.4223",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "sample_operator",
        "x": 570,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "412da17d.09c39",
        "type": "ui_text_input",
        "z": "6bc47c75.93e24c",
        "name": "sample_project",
        "label": "Name of the project*",
        "tooltip": "",
        "group": "bfdb5a44.4223",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "sample_project",
        "x": 580,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "236eeefd.7d50f2",
        "type": "ui_text_input",
        "z": "6bc47c75.93e24c",
        "name": "sample_id",
        "label": "ID of the station*",
        "tooltip": "",
        "group": "bfdb5a44.4223",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "sample_id",
        "x": 590,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a4b7cb08.270d",
        "type": "function",
        "z": "6bc47c75.93e24c",
        "name": "get sample_projet",
        "func": "msg.payload = msg.payload.sample_project;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 80,
        "wires": [
            [
                "412da17d.09c39"
            ]
        ]
    },
    {
        "id": "acfe2f.33fd31d",
        "type": "function",
        "z": "6bc47c75.93e24c",
        "name": "get sample_ship",
        "func": "msg.payload = msg.payload.sample_ship;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 160,
        "wires": [
            [
                "ccb4ce9e.4f9108"
            ]
        ]
    },
    {
        "id": "d7cff063.331ff8",
        "type": "function",
        "z": "6bc47c75.93e24c",
        "name": "get sample_id",
        "func": "msg.payload = msg.payload.sample_id+1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 120,
        "wires": [
            [
                "236eeefd.7d50f2"
            ]
        ]
    },
    {
        "id": "cfaa2598.c63ec",
        "type": "function",
        "z": "6bc47c75.93e24c",
        "name": "get sample_operator",
        "func": "msg.payload = msg.payload.sample_operator;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 200,
        "wires": [
            [
                "d76b1790.9ffc2"
            ]
        ]
    },
    {
        "id": "25201379.163e3c",
        "type": "function",
        "z": "6bc47c75.93e24c",
        "name": "get sample_sampling_gear",
        "func": "msg.payload = msg.payload.sample_sampling_gear;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 240,
        "wires": [
            [
                "50431d7c.cc673c"
            ]
        ]
    },
    {
        "id": "80851464.e5fcf",
        "type": "ui_template",
        "z": "6bc47c75.93e24c",
        "group": "bfdb5a44.4223",
        "name": "",
        "order": 5,
        "width": "24",
        "height": "2",
        "format": "<div ng-bind-html=\"msg.payload\">Fill the different inputs concerning the sample you would to image.</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 290,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "9ee31ce7.88d9c",
        "type": "function",
        "z": "c4414305.176578",
        "name": "get global",
        "func": "msg.payload={\n    \n        \"sample_project\":global.get(\"sample_project\"),\n        \"sample_id\":global.get(\"sample_id\"),\n        \"sample_ship\":global.get(\"sample_ship\"),\n        \"sample_operator\":global.get(\"sample_operator\"),\n        \"sample_sampling_gear\":global.get(\"sample_sampling_gear\"),\n        \n        \"acq_id\":global.get(\"acq_id\"),\n        \"acq_instrument\":global.get(\"acq_instrument\"),\n        //\"acq_instrument_id\":global.get(\"acq_instrument_id\"),\n        \"acq_celltype\":global.get(\"acq_celltype\"),\n        \"acq_minimum_mesh\":global.get(\"acq_minimum_mesh\"),\n        \"acq_maximum_mesh\":global.get(\"acq_maximum_mesh\"),\n        \"acq_min_esd\":global.get(\"acq_min_esd\"),\n        \"acq_max_esd\":global.get(\"acq_max_esd\"),\n        \"acq_volume\":global.get(\"acq_volume\"),\n        \"acq_magnification\":global.get(\"magnification\"),\n        \"acq_fnumber_objective\":global.get(\"acq_fnumber_objective\"),\n        \n        \"acq_camera_name\":\"Pi Camera V2.1 - 8MP\",\n        \n        \"object_date\":global.get(\"object_date\"),\n        \"object_time\":global.get(\"object_time\"),\n        \"object_lat\":global.get(\"object_lat\"),\n        \"object_lon\":global.get(\"object_lon\"),\n        \"object_depth_min\":global.get(\"object_depth_min\"),\n        \"object_depth_max\":global.get(\"object_depth_max\"),\n        \n        \"custom_nb_frame\":global.get(\"custom_nb_frame\"),\n        \"custom_nb_step\":global.get(\"custom_nb_step\"),\n        \"custom_segmentation\":global.get(\"custom_segmentation\"),\n        \"custom_sleep_before\":global.get(\"custom_sleep_before\"),\n        \"focus_nb_step\":global.get(\"focus_nb_step\"),\n        \"pump_flowrate\":global.get(\"pump_flowrate\"),\n        \"pump_manual_volume\":global.get(\"pump_manual_volume\"),\n        \n        \"process_pixel\":global.get(\"process_pixel\"),\n        \"process_id\":global.get(\"process_id\")\n        \n        \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1240,
        "y": 120,
        "wires": [
            [
                "3e15ea9d.8a1186"
            ]
        ]
    },
    {
        "id": "6b6db57d.0ac41c",
        "type": "file",
        "z": "c4414305.176578",
        "name": "",
        "filename": "/home/pi/PlanktonScope/config.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1660,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3e15ea9d.8a1186",
        "type": "json",
        "z": "c4414305.176578",
        "name": "config.json",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1410,
        "y": 120,
        "wires": [
            [
                "6b6db57d.0ac41c"
            ]
        ]
    },
    {
        "id": "92f32906.e7cb08",
        "type": "file in",
        "z": "c4414305.176578",
        "name": "",
        "filename": "/home/pi/PlanktonScope/config.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "11e61823.32d9a8"
            ]
        ],
        "info": "# PlanktonScope Help\nThis Node will read the content of the file named **config.txt** containing all the input placeholders.\n"
    },
    {
        "id": "233acfba.0fa74",
        "type": "inject",
        "z": "c4414305.176578",
        "name": "on_load",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "92f32906.e7cb08",
                "8d581456.eb62f8",
                "43ea9a81.af94a4"
            ]
        ],
        "info": "# PlanktonScope Help\nWhen the **Pi** is booting, **Node-RED** will be initiated and this node will be activated once and execute the following nodes."
    },
    {
        "id": "11e61823.32d9a8",
        "type": "json",
        "z": "c4414305.176578",
        "name": "config.json",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 610,
        "y": 80,
        "wires": [
            [
                "f5241d95.8c94a8",
                "f7d7ea16.bcd9d8",
                "7f1ce067.e4ae9",
                "5c0870d2.949358",
                "3687179c.9ab2e8",
                "129419c2.cd531e",
                "eb940d39.f6b0d"
            ]
        ]
    },
    {
        "id": "d00f18b.a005468",
        "type": "function",
        "z": "c4414305.176578",
        "name": "set global",
        "func": "var value = msg.payload;\nvar key = msg.topic;\n\nglobal.set(key,value);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1240,
        "y": 80,
        "wires": [
            [
                "9ee31ce7.88d9c"
            ]
        ]
    },
    {
        "id": "ab1f24d.d9492d8",
        "type": "rpi-gpio out",
        "z": "c4414305.176578",
        "name": "",
        "pin": "40",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 440,
        "y": 180,
        "wires": []
    },
    {
        "id": "3977f843.8914b8",
        "type": "ui_template",
        "z": "c4414305.176578",
        "group": "6b2a8cdd.9f43cc",
        "name": "Stream Pi Camera",
        "order": 1,
        "width": 24,
        "height": 19,
        "format": "<center><iframe id=\"inlineFrameExample\"\n    title=\"Inline Frame Example\"\n    height=\"1000\"\n    width=\"1300\"\n    frameborder=\"0\"\n    src=\"http://planktoscope.local:8000/index.html\">\n</iframe></center>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 930,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "8d581456.eb62f8",
        "type": "function",
        "z": "c4414305.176578",
        "name": "init LED",
        "func": "msg.payload=1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "ab1f24d.d9492d8"
            ]
        ]
    },
    {
        "id": "f5241d95.8c94a8",
        "type": "subflow:6bc47c75.93e24c",
        "z": "c4414305.176578",
        "name": "",
        "env": [],
        "x": 930,
        "y": 140,
        "wires": [
            [
                "d00f18b.a005468"
            ]
        ]
    },
    {
        "id": "129419c2.cd531e",
        "type": "subflow:3df4e02.36602a",
        "z": "c4414305.176578",
        "name": "",
        "env": [],
        "x": 920,
        "y": 360,
        "wires": [
            [
                "d00f18b.a005468"
            ]
        ]
    },
    {
        "id": "eb940d39.f6b0d",
        "type": "subflow:b1edcbe7.366f7",
        "z": "c4414305.176578",
        "name": "",
        "env": [],
        "x": 920,
        "y": 400,
        "wires": [
            [
                "d00f18b.a005468"
            ]
        ]
    },
    {
        "id": "f7d7ea16.bcd9d8",
        "type": "subflow:5163a57b.0008b4",
        "z": "c4414305.176578",
        "name": "",
        "env": [],
        "x": 940,
        "y": 180,
        "wires": [
            [
                "d00f18b.a005468"
            ],
            [
                "9ee31ce7.88d9c"
            ]
        ]
    },
    {
        "id": "7f1ce067.e4ae9",
        "type": "subflow:672ac548.1a9bac",
        "z": "c4414305.176578",
        "name": "",
        "env": [],
        "x": 920,
        "y": 220,
        "wires": [
            [
                "d00f18b.a005468"
            ],
            [
                "9ee31ce7.88d9c"
            ]
        ]
    },
    {
        "id": "7dd20df2.204fa4",
        "type": "subflow:7aea7e49.4a3c88",
        "z": "c4414305.176578",
        "name": "RPi commands",
        "env": [],
        "x": 920,
        "y": 680,
        "wires": []
    },
    {
        "id": "d207c3d7.bb3c7",
        "type": "subflow:20bc0424.146724",
        "z": "c4414305.176578",
        "name": "",
        "env": [],
        "x": 320,
        "y": 320,
        "wires": []
    },
    {
        "id": "5c0870d2.949358",
        "type": "subflow:4d3786dd.dd79f",
        "z": "c4414305.176578",
        "name": "Process metadata",
        "env": [],
        "x": 930,
        "y": 260,
        "wires": [
            [
                "d00f18b.a005468"
            ]
        ]
    },
    {
        "id": "3687179c.9ab2e8",
        "type": "subflow:4273b9bf.bb07a8",
        "z": "c4414305.176578",
        "name": "Acquisition inputs",
        "env": [],
        "x": 930,
        "y": 540,
        "wires": [
            [
                "d00f18b.a005468"
            ]
        ],
        "icon": "node-red-dashboard/ui_switch.png"
    },
    {
        "id": "43ea9a81.af94a4",
        "type": "subflow:435c6174.e0c8b",
        "z": "c4414305.176578",
        "name": "",
        "env": [],
        "x": 320,
        "y": 280,
        "wires": []
    },
    {
        "id": "da33ab49.07225",
        "type": "subflow:3f0fd072.06e2c8",
        "z": "c4414305.176578",
        "name": "",
        "env": [],
        "x": 930,
        "y": 580,
        "wires": []
    },
    {
        "id": "d4475439.1b745",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "Inject config.json in GUI inputs",
        "info": "",
        "x": 660,
        "y": 40,
        "wires": []
    },
    {
        "id": "ad502db0.d19c3",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "Edit config.json on changes",
        "info": "",
        "x": 1300,
        "y": 40,
        "wires": []
    },
    {
        "id": "40d4f54b.baf6d4",
        "type": "subflow:aafb7d9f.f516f",
        "z": "c4414305.176578",
        "name": "",
        "env": [],
        "x": 920,
        "y": 720,
        "wires": []
    },
    {
        "id": "3ab2666b.b74962",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "Create and run python code receiving MQTT queries",
        "info": "",
        "x": 410,
        "y": 240,
        "wires": []
    },
    {
        "id": "5562e88a.9f16a",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "On Load",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "efcdeb9b.9d257",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "Get metadata from config.json",
        "info": "",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "55f198c4.c121d8",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "Turn on the white LED",
        "info": "",
        "x": 320,
        "y": 140,
        "wires": []
    },
    {
        "id": "29c52f09.54d1f8",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "Visible on the GUI",
        "info": "",
        "x": 930,
        "y": 40,
        "wires": []
    },
    {
        "id": "3308bd4b.d469b2",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "RPi",
        "info": "",
        "x": 890,
        "y": 640,
        "wires": []
    },
    {
        "id": "8b58c123.c1ea68",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "Metadata",
        "info": "",
        "x": 900,
        "y": 100,
        "wires": []
    },
    {
        "id": "ee4608b3.725f",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "Actuation",
        "info": "",
        "x": 900,
        "y": 320,
        "wires": []
    },
    {
        "id": "adcdfe58.613838",
        "type": "comment",
        "z": "c4414305.176578",
        "name": "Acquisition",
        "info": "",
        "x": 900,
        "y": 500,
        "wires": []
    }
]
